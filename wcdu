#!/usr/bin/env python

"""
Wolf Creek Debug Utility
"""

import sys

from Menu import Menu
from SesPageSas  import SesPageSas
from SesPageFile import SesPageFile
from configuration import Configuration

# Set up communication path.
#sp = SesPageSas("/dev/sg3")
sp = SesPageFile()


# utility functions

def indentedtext(head, text, tail):
    """
    Return head + text + tail, but with newlines in text replaced by as many
    spaces as there are in head.  This has the effect of lining up multiple
    lines in text.
    """
    return head + text.replace("\n", "\n"+" "*len(head)) + tail

def dump_fields(fl):
    if fl:
        for f in fl:
            print f.val, f.name
    

# SES page display functions

def sespage00(p):
    Menu.clear()
    page00 = sp.parse(sp.readpage(0x00))
    print page00["pagedesc"] + ":"
    for p in page00["data"]:
        print "%.2X" % p,
    print
    Menu.wait()

def sespage01(p):
    Menu.clear()
    page01 = sp.parse(sp.readpage(0x01))
    #print page01
    for enclist in page01["data"].enclosures.val:
        #print enclist
        #print
        #print enclist
        print "Enclosure #" + str(enclist.subid.val)
        print "    %-31s:" % enclist.logid   .desc, "%X" % enclist.logid   .val
        print "    %-31s:" % enclist.vendor  .desc, enclist.vendor  .val
        print "    %-31s:" % enclist.product .desc, enclist.product .val
        print "    %-31s:" % enclist.revision.desc, enclist.revision.val
        print "    Type Descriptors:"
        print "        type possible text"
        for tdlist in enclist.typedesc.val:
            print "        %.2X   %3d      %-s" % \
                (tdlist.type.val, tdlist.possible.val, tdlist.text.val)
    Menu.wait()

def sespage02(p):
    Menu.clear()
    page02 = sp.parse(sp.readpage(0x02))
    if not page02["data"]:
        page01 = sp.parse(sp.readpage(0x01))
        page02 = sp.parse(sp.readpage(0x02))
    
    for enclosure in page02["data"].enclosures.val:
        for typ in enclosure:
            print "type:", "%.2X" % typ["type"], typ["text"]
            elnum = 0
            for element in typ["elements"]:
                prdfail  = "P" if element.prdfail .val else "."
                disabled = "D" if element.disabled.val else "."
                swap     = "S" if element.swap    .val else "."
                elstat = element.elstat.val
                status = element.status.val
                print "    %.3d" % elnum, prdfail+disabled+swap, elstat, "%.6X" % status
                elnum += 1
    Menu.wait()

def sespage05(p):
    Menu.clear()
    page05 = sp.parse(sp.readpage(0x05))
    if not page05["data"]:
        page01 = sp.parse(sp.readpage(0x01))
        page05 = sp.parse(sp.readpage(0x05))
    
    for enclosure in page05["data"].enclosures.val:
        for typ in enclosure:
            print "type:", "%.2X" % typ["type"], typ["text"]
            elnum = 0
            for element in typ["elements"]:
                print "    %.3d" % elnum, "%3d %3d %3d %3d" % \
                (
                 element.hicrit.val,
                 element.hiwarn.val,
                 element.lowarn.val,
                 element.locrit.val,
                 )
                elnum += 1
    Menu.wait()
    
def sespage07(p):
    Menu.clear()
    page07 = sp.parse(sp.readpage(0x07))
    if not page07["data"]:
        page01 = sp.parse(sp.readpage(0x01))
        page07 = sp.parse(sp.readpage(0x07))
    
    for enclosure in page07["data"].enclosures.val:
        for typ in enclosure:
            print "type:", "%.2X" % typ["type"], typ["text"]
            elnum = 0
            for element in typ["elements"]:
                #print "%.3d" % elnum, '"' + element.text.val + '"'
                print indentedtext('    %.3d "' % elnum, element.text.val, '"')
                elnum += 1
    Menu.wait()

def sespage0a(p):
    Menu.clear()
    page0a = sp.parse(sp.readpage(0x0a))
    if not page0a["data"]:
        page01 = sp.parse(sp.readpage(0x01))
        page0a = sp.parse(sp.readpage(0x0a))
    
    addelpage = page0a["data"]
    headline = ''
    headline += "enc:typ:idx valid?  all?   init targ attached sas adr sas address      phy"
    print headline
    for addel in addelpage.descriptors.val:
        leftline = ''
        if addel.eip.val:
            leftline += "%3d: %.2X:%.3d " % addel.index.val
        else:
            leftline += "    "
        leftline += "invalid" if addel.invalid.val else "  valid"
        leftline += " "
        leftline += "notall" if addel.notall.val else "   all"
        for phy in addel.phydescriptors.val:
            si = 'S' if phy.ssp_init.val else '.'
            ti = 'T' if phy.stp_init.val else '.'
            mi = 'M' if phy.smp_init.val else '.'
            st = 'S' if phy.ssp_targ.val else '.'
            tt = 'T' if phy.stp_targ.val else '.'
            mt = 'M' if phy.smp_targ.val else '.'
            ports = si+ti+mi+'  '+st+tt+mt
            print leftline, "%s  %.16X %.16X %.2X " % \
                (ports, phy.attached_sas_addr.val, phy.sas_addr.val, phy.phy_id.val)
            leftline = ' ' * len(leftline)
    Menu.wait()

def sespage0e(p):
    Menu.clear()
    page0e = sp.parse(sp.readpage(0x0e))
    for descriptor in page0e["data"].descriptors.val:
        print "Enclosure #" + str(descriptor.subid.val)
        print "    status                : %.2X - %s" % (descriptor.status.val, descriptor.status_text.val)
        print "    additional status     : %.2X" % descriptor.additional_status.val
        print "    maximum size          : %d" % descriptor.maxsize.val
        print "    expected buffer id    : %.2X" % descriptor.expected_id.val
        print "    expected buffer offset: %.8X" % descriptor.expected_offset.val
    pass
    Menu.wait()


# menu definitions and stubs

bmc_menu = Menu("BMC", [['Exit', Menu.stop]])

# items in Platform menu
bpm_menu       = Menu("BPM"      , [['Exit', Menu.stop]])
ethernet_menu  = Menu("Ethernet" , [['Exit', Menu.stop]])
gpio_menu      = Menu("GPIO"     , [['Exit', Menu.stop]])
hdd_menu       = Menu("HDD"      , [['Exit', Menu.stop]])
memory_menu    = Menu("Memory"   , [['Exit', Menu.stop]])
pci_menu       = Menu("PCI"      , [['Exit', Menu.stop]])
processor_menu = Menu("Processor", [['Exit', Menu.stop]])
def reset(p): pass
smbus_menu     = Menu("SMBUS"    , [['Exit', Menu.stop]])
tpm_menu       = Menu("TPM"      , [['Exit', Menu.stop]])
usb_menu       = Menu("USB"      , [['Exit', Menu.stop]])

platform_menu = \
    Menu("Platform",
         [
          ['Exit'            , Menu.stop         , "help"      ],
          ['BPM Menu'        , bpm_menu      .run, "bpm"       ],
          ['Ethernet Menu'   , ethernet_menu .run, "ethernet"  ],
          ['GPIO Menu'       , gpio_menu     .run, "gpio"      ],
          ['HDD Menu'        , hdd_menu      .run, "hdd"       ],
          ['Memory Menu'     , memory_menu   .run, "memory"    ],
          ['PCI Menu'        , pci_menu      .run, "pci"       ],
          ['Processor Menu'  , processor_menu.run, "processor" ],
          ['Reset the System', reset             , "reset"     ],
          ['SMBUS Menu'      , smbus_menu    .run, "smbus"     ],
          ['TPM Menu'        , tpm_menu      .run, "tpm"       ],
          ['USB Menu'        , usb_menu      .run, "usb"       ],
          ])

# items in SAS menu
cpld_menu        = Menu("CPLD"          , [['Exit', Menu.stop]])
def drive_status         (p): pass
def enclosure_status     (p): pass
fan_menu         = Menu("Fan"           , [['Exit', Menu.stop]])
def flash_expander_image (p): pass
lcd_menu         = Menu("LCD"           , [['Exit', Menu.stop]])
led_menu         = Menu("LED"           , [['Exit', Menu.stop]])
log_menu         = Menu("Log"           , [['Exit', Menu.stop]])
phy_menu         = Menu("PHY"           , [['Exit', Menu.stop]])
powersupply_menu = Menu("Power Supply"  , [['Exit', Menu.stop]])
def rebootreset_expander (p): pass
sensor_menu      = Menu("Sensor"        , [['Exit', Menu.stop]])
ses_menu = \
    Menu("SES Page Dump",
         [
          ['Exit', Menu.stop, "help"],
          ['Page 0x00: Supported Diagnostic Pages', sespage00, "0x00"],
          ['Page 0x01: Configuration'             , sespage01, "0x01"],
          ['Page 0x02: Enclosure Status'          , sespage02, "0x02"],
         #['Page 0x04: String In'                 , sespage04, "0x04"],
          ['Page 0x05: Threshold In'              , sespage05, "0x05"],
          ['Page 0x07: Element Descriptor'        , sespage07, "0x07"],
          ['Page 0x0a: Additional Element'        , sespage0a, "0x0a"],
          ['Page 0x0e: Download Microcode Status' , sespage0e, "0x0e"],
         #['Page 0x80: Event Log'                 , sespage80, "0x80"], # SK and PG
         #['Page 0x82: SXP Firmware Status'       , sespage82, "0x82"], # PG only
         #['Page 0x91: SXP Boot Configuration Status', sespage91, "0x91"], # BM only
         #['Page 0x92: Low Power Condition Status', sespage92, "0x92"], # BM only
         #['Page 0xe0: Report PHY Status'         , sespagee0, "0xe0"], # ST only
         #['Page 0xe1: Report PHY Status'         , sespagee1, "0xe1"], # ST only
         #['Page 0xe2: Report PHY Status'         , sespagee2, "0xe2"], # ST only
         #['Page 0xe3: Report PHY Status'         , sespagee3, "0xe3"], # ST only
         #['Page 0xe4: Report PHY Status'         , sespagee4, "0xe4"], # ST only
         #['Page 0xe5: Report PHY Status'         , sespagee5, "0xe5"], # ST only
         #['Page 0xe8: CLI Command In'            , sespagee8, "0xe8"], # ST only
         #['Page 0xe9: Product Type Flag Status'  , sespagee9, "0xe9"],
          ])
        # WC: Wolf Creek
        # BM: Blue Moon
        # ST: Skytree addendum to Blue Moon
        # PG: Pinot Grigio
twi_menu         = Menu("TWI"           , [['Exit', Menu.stop]])
vpd_menu         = Menu("VPD"           , [['Exit', Menu.stop]])

sas_menu = \
    Menu("SAS",
         [
          ['Exit'                 , Menu.stop           , "help"               ],
          [        'CPLD Menu'    ,        cpld_menu.run, "cpld"               ],
          ['Drive Status'         , drive_status        , "drive"              ],
          ['Enclosure Status'     , enclosure_status    , "enclosure"          ],
          [         'FAN Menu'    ,         fan_menu.run, "fan"                ],
          ['Flash Expander Image' , flash_expander_image, "flashexpanderimage" ],
          [         'LCD Menu'    ,         lcd_menu.run, "lcd"                ],
          [         'LED Menu'    ,         led_menu.run, "led"                ],
          [         'LOG Menu'    ,         log_menu.run, "log"                ],
          [         'PHY Menu'    ,         phy_menu.run, "phy"                ],
          ['Power Supply Menu'    , powersupply_menu.run, "powersupply"        ],
          ['Reboot/Reset Expander', rebootreset_expander, "reboot"             ],
          [      'Sensor Menu'    ,      sensor_menu.run, "sensor"             ],
          ['SES Page Dump'        ,         ses_menu.run, "ses"                ],
          [         'TWI Menu'    ,         twi_menu.run, "twi"                ],
          [         'VPD Menu'    ,         vpd_menu.run, "vpd"                ],
          ])

utility_menu = \
    Menu("Debug Utility",
         [
          ['Exit'          , Menu.stop        , "help"     ],
          ['BMC Menu'      , bmc_menu     .run, "bmc"      ],
          ['Platform Menu' , platform_menu.run, "platform" ],
          ['SAS Menu'      , sas_menu     .run, "sas"      ],
          ])

Configuration.setInteractive(not sys.argv[1:])
utility_menu.run(sys.argv[1:])

