#!/usr/bin/env python

"""
Wolf Creek Debug Utility
"""

import sys

from Menu import Menu
from SesPageSas  import SesPageSas
from SesPageFile import SesPageFile

# Set up communication path.
#sp = SesPageSas("/dev/sg3")
sp = SesPageFile()


# items in Platform menu
def reset(p): pass
smbus_menu     = Menu("SMBUS"    , [['Exit', Menu.stop]])
pci_menu       = Menu("PCI"      , [['Exit', Menu.stop]])
hdd_menu       = Menu("HDD"      , [['Exit', Menu.stop]])
bpm_menu       = Menu("BPM"      , [['Exit', Menu.stop]])
ethernet_menu  = Menu("Ethernet" , [['Exit', Menu.stop]])
gpio_menu      = Menu("GPIO"     , [['Exit', Menu.stop]])
processor_menu = Menu("Processor", [['Exit', Menu.stop]])
memory_menu    = Menu("Memory"   , [['Exit', Menu.stop]])
tpm_menu       = Menu("TPM"      , [['Exit', Menu.stop]])
usb_menu       = Menu("USB"      , [['Exit', Menu.stop]])

platform_menu = \
    Menu("Platform",
         [
          ['Exit'            , Menu.stop         , "help"      ],
          ['Reset the System', reset             , "reset"     ],
          ['SMBUS Menu'      , smbus_menu    .run, "smbus"     ],
          ['PCI Menu'        , pci_menu      .run, "pci"       ],
          ['HDD Menu'        , hdd_menu      .run, "hdd"       ],
          ['BPM Menu'        , bpm_menu      .run, "bpm"       ],
          ['Ethernet Menu'   , ethernet_menu .run, "ethernet"  ],
          ['GPIO Menu'       , gpio_menu     .run, "gpio"      ],
          ['Processor Menu'  , processor_menu.run, "processor" ],
          ['Memory Menu'     , memory_menu   .run, "memory"    ],
          ['TPM Menu'        , tpm_menu      .run, "tpm"       ],
          ['USB Menu'        , usb_menu      .run, "usb"       ],
          ])

bmc_menu = Menu("BMC", [['Exit', Menu.stop]])

# items in SAS menu
def enclosure_status     (p): pass
powersupply_menu = Menu("Power Supply"  , [['Exit', Menu.stop]])
cpld_menu        = Menu("CPLD"          , [['Exit', Menu.stop]])
def flash_expander_image (p): pass
def rebootreset_expander (p): pass
def drive_status         (p): pass
log_menu         = Menu("Log"           , [['Exit', Menu.stop]])
led_menu         = Menu("LED"           , [['Exit', Menu.stop]])
fan_menu         = Menu("Fan"           , [['Exit', Menu.stop]])
twi_menu         = Menu("TWI"           , [['Exit', Menu.stop]])
phy_menu         = Menu("PHY"           , [['Exit', Menu.stop]])
vpd_menu         = Menu("VPD"           , [['Exit', Menu.stop]])
sensor_menu      = Menu("Sensor"        , [['Exit', Menu.stop]])
lcd_menu         = Menu("LCD"           , [['Exit', Menu.stop]])

def sespage00(p):
    page00 = sp.parse(sp.readpage(0x00))
    print page00["pagedesc"] + ":"
    for p in page00["data"]:
        print "%.2X" % p,
    print
    print "press enter",
    raw_input()
    

def sespage01(p):
    sys.stdout.write("\033[H\033[J")
    page01 = sp.parse(sp.readpage(0x01))
    #print page01
    for enclist in page01["data"].enclosures.val:
        #print enclist
        #print
        #print enclist
        print "Enclosure #" + str(enclist.subid.val)
        print "    %-31s:" % enclist.logid   .desc, "%X" % enclist.logid   .val
        print "    %-31s:" % enclist.vendor  .desc, enclist.vendor  .val
        print "    %-31s:" % enclist.product .desc, enclist.product .val
        print "    %-31s:" % enclist.revision.desc, enclist.revision.val
        print "    Type Descriptors:"
        print "        type possible text"
        for tdlist in enclist.typedesc.val:
            print "        %.2X   %3d      %-s" % (tdlist.type.val, tdlist.possible.val, tdlist.text.val)
    print
    print "press enter",
    raw_input()

def sespage02(p):
    sys.stdout.write("\033[H\033[J")
    page02 = sp.parse(sp.readpage(0x02))
    if not page02["data"]:
        page01 = sp.parse(sp.readpage(0x01))
        page02 = sp.parse(sp.readpage(0x02))
    
    for enclosure in page02["data"].enclosures.val:
        for typ in enclosure:
            print "type:", "%.2X" % typ["type"], typ["text"]
            elnum = 0
            for element in typ["elements"]:
                prdfail  = "P" if element.prdfail .val else "."
                disabled = "D" if element.disabled.val else "."
                swap     = "S" if element.swap    .val else "."
                elstat = element.elstat.val
                status = element.status.val
                print "%.3d" % elnum, prdfail+disabled+swap, elstat, "%.6X" % status
                elnum += 1
            
    print
    print "press enter",
    raw_input()

def sespage05(p):
    sys.stdout.write("\033[H\033[J")
    page05 = sp.parse(sp.readpage(0x05))
    if not page05["data"]:
        page01 = sp.parse(sp.readpage(0x01))
        page05 = sp.parse(sp.readpage(0x05))
    
    for enclosure in page05["data"].enclosures.val:
        for typ in enclosure:
            print "type:", "%.2X" % typ["type"], typ["text"]
            elnum = 0
            for element in typ["elements"]:
                print "%.3d" % elnum, "%3d %3d %3d %3d" % \
                (
                 element.hicrit.val,
                 element.hiwarn.val,
                 element.lowarn.val,
                 element.locrit.val,
                 )
                elnum += 1
            
    print
    print "press enter",
    raw_input()

def sespage07(p):
    sys.stdout.write("\033[H\033[J")
    page07 = sp.parse(sp.readpage(0x07))
    if not page07["data"]:
        page01 = sp.parse(sp.readpage(0x01))
        page07 = sp.parse(sp.readpage(0x07))
    
    for enclosure in page07["data"].enclosures.val:
        for typ in enclosure:
            print "type:", "%.2X" % typ["type"], typ["text"]
            elnum = 0
            for element in typ["elements"]:
                print "%.3d" % elnum, '"' + element.text.val + '"'
                elnum += 1
            
    print
    print "press enter",
    raw_input()

def dump_fields(fl):
    if fl:
        for f in fl:
            print f.val, f.name
    
def sespage0a(p):
    sys.stdout.write("\033[H\033[J")
    page0a = sp.parse(sp.readpage(0x0a))
    if not page0a["data"]:
        page01 = sp.parse(sp.readpage(0x01))
        page0a = sp.parse(sp.readpage(0x0a))
    
    head, dhead, eip, info = page0a["data"]
    print "dhead =", dhead.invalid.val, dhead.eip.val, dhead.protocol.val, dhead.length.val
    #dump_fields(dhead)
    #print
    print "eip =", eip.eiioe.val, eip.index.val
    #dump_fields(eip)
    #print
    print "info ="
    dump_fields(info)
    print

    print
    print "press enter",
    raw_input()

ses_menu = \
    Menu("SES Page Dump",
         [
          ['Exit', Menu.stop, "help"],
          ['Page 0x00: Supported Diagnostic Pages', sespage00, "0x00"],
          ['Page 0x01: Configuration'             , sespage01, "0x01"],
          ['Page 0x02: Enclosure Status'          , sespage02, "0x02"],
          ['Page 0x05: Threshold Status'          , sespage05, "0x05"],
          ['Page 0x07: Element Descriptor'        , sespage07, "0x07"],
          ['Page 0x0a: Additional Element'        , sespage0a, "0x0a"],
          ])

sas_menu = \
    Menu("SAS",
         [
          ['Exit'                 , Menu.stop           , "help"               ],
          ['Enclosure Status'     , enclosure_status    , "enclosure"          ],
          ['Power Supply Menu'    , powersupply_menu.run, "powersupply"        ],
          [        'CPLD Menu'    ,        cpld_menu.run, "cpld"               ],
          ['Flash Expander Image' , flash_expander_image, "flashexpanderimage" ],
          ['Reboot/Reset Expander', rebootreset_expander, "reboot"             ],
          ['Drive Status'         , drive_status        , "drive"              ],
          [         'LOG Menu'    ,         log_menu.run, "log"                ],
          ['SES Page Dump'        ,         ses_menu.run, "ses"                ],
          [         'LED Menu'    ,         led_menu.run, "led"                ],
          [         'FAN Menu'    ,         fan_menu.run, "fan"                ],
          [         'TWI Menu'    ,         twi_menu.run, "twi"                ],
          [         'PHY Menu'    ,         phy_menu.run, "phy"                ],
          [         'VPD Menu'    ,         vpd_menu.run, "vpd"                ],
          [      'Sensor Menu'    ,      sensor_menu.run, "sensor"             ],
          [         'LCD Menu'    ,         lcd_menu.run, "lcd"                ],
          ])

utility_menu = \
    Menu("Debug Utility",
         [
          ['Exit'          , Menu.stop        , "help"     ],
          ['Platform Menu' , platform_menu.run, "platform" ],
          ['BMC Menu'      , bmc_menu     .run, "bmc"      ],
          ['SAS Menu'      , sas_menu     .run, "sas"      ],
          ])

utility_menu.run(sys.argv[1:])

